{"version":3,"sources":["animated.tsx"],"names":["React","useContext","useMemo","useRef","Animated","StyleSheet","Reanimated","useEvent","useHandler","useSharedValue","KeyboardControllerView","useResizeMode","KeyboardControllerViewAnimated","createAnimatedComponent","defaultContext","animated","progress","Value","height","reanimated","value","KeyboardContext","createContext","useKeyboardAnimation","context","useReanimatedKeyboardAnimation","useAnimatedKeyboardHandler","handlers","dependencies","doDependenciesDiffer","event","onKeyboardMove","eventName","endsWith","styles","create","container","flex","hidden","display","position","KeyboardProvider","children","statusBarTranslucent","current","progressSV","heightSV","style","transform","translateX","translateY","nativeEvent","useNativeDriver","handler"],"mappings":"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","sourcesContent":["import React, { useContext, useMemo, useRef } from 'react';\nimport { Animated, StyleSheet, ViewStyle } from 'react-native';\nimport Reanimated, {\n  useEvent,\n  useHandler,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport {\n  EventWithName,\n  KeyboardControllerProps,\n  KeyboardControllerView,\n  NativeEvent,\n  useResizeMode,\n} from './native';\n\nconst KeyboardControllerViewAnimated = Reanimated.createAnimatedComponent(\n  Animated.createAnimatedComponent(\n    KeyboardControllerView\n  ) as React.FC<KeyboardControllerProps>\n);\n\ntype AnimatedContext = {\n  progress: Animated.Value;\n  height: Animated.Value;\n};\ntype ReanimatedContext = {\n  progress: Reanimated.SharedValue<number>;\n  height: Reanimated.SharedValue<number>;\n};\ntype KeyboardAnimationContext = {\n  animated: AnimatedContext;\n  reanimated: ReanimatedContext;\n};\nconst defaultContext: KeyboardAnimationContext = {\n  animated: {\n    progress: new Animated.Value(0),\n    height: new Animated.Value(0),\n  },\n  reanimated: {\n    progress: { value: 0 },\n    height: { value: 0 },\n  },\n};\nexport const KeyboardContext = React.createContext(defaultContext);\n\nexport const useKeyboardAnimation = (): AnimatedContext => {\n  useResizeMode();\n  const context = useContext(KeyboardContext);\n\n  return context.animated;\n};\n\nexport const useReanimatedKeyboardAnimation = (): ReanimatedContext => {\n  useResizeMode();\n  const context = useContext(KeyboardContext);\n\n  return context.reanimated;\n};\n\nfunction useAnimatedKeyboardHandler<TContext extends Record<string, unknown>>(\n  handlers: {\n    onKeyboardMove?: (e: NativeEvent, context: TContext) => void;\n  },\n  dependencies?: ReadonlyArray<unknown>\n) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event: EventWithName<NativeEvent>) => {\n      'worklet';\n      const { onKeyboardMove } = handlers;\n\n      if (onKeyboardMove && event.eventName.endsWith('onKeyboardMove')) {\n        onKeyboardMove(event, context);\n      }\n    },\n    ['onKeyboardMove'],\n    doDependenciesDiffer\n  );\n}\n\ntype Styles = {\n  container: ViewStyle;\n  hidden: ViewStyle;\n};\n\nexport const styles = StyleSheet.create<Styles>({\n  container: {\n    flex: 1,\n  },\n  hidden: {\n    display: 'none',\n    position: 'absolute',\n  },\n});\n\ntype KeyboardProviderProps = {\n  children: React.ReactNode;\n  /**\n   * Set the value to `true`, if you use translucent status bar on Android.\n   * If you already control status bar translucency via `react-native-screens`\n   * or `StatusBar` component from `react-native`, you can ignore it.\n   * Defaults to `false`.\n   *\n   * @see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/14\n   * @platform android\n   */\n  statusBarTranslucent?: boolean;\n};\n\nexport const KeyboardProvider = ({\n  children,\n  statusBarTranslucent,\n}: KeyboardProviderProps) => {\n  const progress = useRef(new Animated.Value(0)).current;\n  const height = useRef(new Animated.Value(0)).current;\n  const progressSV = useSharedValue(0);\n  const heightSV = useSharedValue(0);\n  const context = useMemo(\n    () => ({\n      animated: { progress: progress, height: height },\n      reanimated: { progress: progressSV, height: heightSV },\n    }),\n    []\n  );\n  const style = useMemo(\n    () => [\n      styles.hidden,\n      { transform: [{ translateX: height }, { translateY: progress }] },\n    ],\n    []\n  );\n\n  const onKeyboardMove = useMemo(\n    () =>\n      Animated.event(\n        [\n          {\n            nativeEvent: {\n              progress,\n              height,\n            },\n          },\n        ],\n        { useNativeDriver: true }\n      ),\n    []\n  );\n\n  const handler = useAnimatedKeyboardHandler(\n    {\n      onKeyboardMove: (event: NativeEvent) => {\n        'worklet';\n        progressSV.value = event.progress;\n        heightSV.value = event.height;\n      },\n    },\n    []\n  );\n\n  return (\n    <KeyboardContext.Provider value={context}>\n      <KeyboardControllerViewAnimated\n        onKeyboardMoveReanimated={handler}\n        onKeyboardMove={onKeyboardMove}\n        statusBarTranslucent={statusBarTranslucent}\n        style={styles.container}\n      >\n        <>\n          <Animated.View\n            // we are using this small hack, because if the component (where\n            // animated value has been used) is unmounted, then animation will\n            // stop receiving events (seems like it's react-native optimization).\n            // So we need to keep a reference to the animated value, to keep it's\n            // always mounted (keep a reference to an animated value).\n            //\n            // To test why it's needed, try to open screen which consumes Animated.Value\n            // then close it and open it again (for example 'Animated transition').\n            style={style}\n          />\n          {children}\n        </>\n      </KeyboardControllerViewAnimated>\n    </KeyboardContext.Provider>\n  );\n};\n"]}