{"version":3,"sources":["replicas.ts"],"names":["availableOSEventType","Platform","OS","defaultAndroidEasing","Easing","bezier","useKeyboardAnimationReplica","height","Animated","Value","progress","animation","current","KeyboardController","setInputMode","AndroidSoftInputModes","SOFT_INPUT_ADJUST_RESIZE","setDefaultMode","listener","Keyboard","addListener","e","timing","toValue","endCoordinates","duration","easing","useNativeDriver","start","remove","IOS_SPRING_CONFIG","damping","stiffness","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","useReanimatedKeyboardAnimationReplica","heightEvent","value","handler","_height","_keyboardHeight","result","_previousResult","_previousKeyboardHeight","show","hide","useGradualKeyboardAnimation","useReanimatedKeyboardAnimation"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useMemo } from 'react';\nimport { Animated, Easing, Keyboard, Platform } from 'react-native';\nimport {\n  runOnUI,\n  useAnimatedReaction,\n  useDerivedValue,\n  useSharedValue,\n  useWorkletCallback,\n  withSpring,\n} from 'react-native-reanimated';\nimport { useReanimatedKeyboardAnimation } from './animated';\n\nimport { AndroidSoftInputModes, KeyboardController } from './native';\n\nconst availableOSEventType = Platform.OS === 'ios' ? 'Will' : 'Did';\n\n// cubic-bezier(.17,.67,.34,.94)\nexport const defaultAndroidEasing = Easing.bezier(0.4, 0.0, 0.2, 1);\ntype KeyboardAnimation = {\n  progress: Animated.Value;\n  height: Animated.Value;\n};\n\n/**\n * An experimental implementation of tracing keyboard appearance.\n * Switch an input mode to adjust resize mode. In this case all did* events\n * are triggering before keyboard appears, and using some approximations\n * it tries to mimicries a native transition.\n *\n * @returns {Animated.Value}\n */\nexport const useKeyboardAnimationReplica = (): KeyboardAnimation => {\n  const height = useRef(new Animated.Value(0));\n  const progress = useRef(new Animated.Value(0));\n  const animation = useMemo(\n    () => ({\n      height: height.current,\n      progress: progress.current,\n    }),\n    []\n  );\n\n  useEffect(() => {\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE\n    );\n\n    return () => KeyboardController.setDefaultMode();\n  }, []);\n  useEffect(() => {\n    const listener = Keyboard.addListener(\n      `keyboard${availableOSEventType}Show`,\n      (e) => {\n        Animated.timing(height.current, {\n          toValue: -e.endCoordinates.height,\n          duration: e.duration !== 0 ? e.duration : 300,\n          easing: Easing.bezier(0.4, 0.0, 0.2, 1),\n          useNativeDriver: true,\n        }).start();\n\n        return () => listener.remove();\n      }\n    );\n  }, []);\n  useEffect(() => {\n    const listener = Keyboard.addListener(\n      `keyboard${availableOSEventType}Hide`,\n      (e) => {\n        Animated.timing(height.current, {\n          toValue: 0,\n          duration: e.duration !== 0 ? e.duration : 300,\n          easing: Easing.bezier(0.4, 0.0, 0.2, 1),\n          useNativeDriver: true,\n        }).start();\n\n        return () => listener.remove();\n      }\n    );\n  }, []);\n\n  return animation;\n};\n\nconst IOS_SPRING_CONFIG = {\n  damping: 500,\n  stiffness: 1000,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 10,\n  restSpeedThreshold: 10,\n};\n\n/**\n * A close replica to native iOS keyboard animation. The problem is that\n * iOS (unlike Android) can not fire events for each keyboard frame movement.\n * As a result we can not get gradual values (for example, for progress it always\n * will be 1 or 0). So if you want to rely on gradual values you will need to use\n * this replica.\n *\n * The transition is hardcoded and may vary from one to another OS versions. But it\n * seems like last time it has been changed in iOS 7. Since RN supports at least iOS\n * 11 it doesn't make sense to replicate iOS 7 behavior. If it changes in next OS\n * versions, then this implementation should be revisited and reflect necessary changes.\n *\n * @returns {height, progress} - animated values\n */\nexport const useReanimatedKeyboardAnimationReplica = () => {\n  const height = useSharedValue(0);\n  const heightEvent = useSharedValue(0);\n\n  const progress = useDerivedValue(() => height.value / heightEvent.value);\n\n  const handler = useWorkletCallback((_height: number) => {\n    heightEvent.value = _height;\n  }, []);\n\n  useAnimatedReaction(\n    () => ({\n      _keyboardHeight: heightEvent.value,\n    }),\n    (result, _previousResult) => {\n      const { _keyboardHeight } = result;\n      const _previousKeyboardHeight = _previousResult?._keyboardHeight;\n\n      if (_keyboardHeight !== _previousKeyboardHeight) {\n        height.value = withSpring(_keyboardHeight, IOS_SPRING_CONFIG);\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    const show = Keyboard.addListener('keyboardWillShow', (e) => {\n      runOnUI(handler)(-e.endCoordinates.height);\n    });\n    const hide = Keyboard.addListener('keyboardWillHide', () => {\n      runOnUI(handler)(0);\n    });\n\n    return () => {\n      show.remove();\n      hide.remove();\n    };\n  }, []);\n\n  return { height, progress };\n};\n\nexport const useGradualKeyboardAnimation =\n  Platform.OS === 'ios'\n    ? useReanimatedKeyboardAnimationReplica\n    : useReanimatedKeyboardAnimation;\n"]}