<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Keyboard Controller Blog</title>
        <link>https://kirillzyusko.github.io/react-native-keyboard-controller/blog</link>
        <description>Keyboard Controller Blog</description>
        <lastBuildDate>Thu, 28 Sep 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[New setEnabled method]]></title>
            <link>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/set-enabled</link>
            <guid>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/set-enabled</guid>
            <pubDate>Thu, 28 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[I'm thrilled to announce the release of react-native-keyboard-controller version 1.8.0. With this latest release, I introduce the useKeyboardController hook and setEnabled method, which allows for a gradual integration of the library into your project, enabling you to disable the module on specific screens as needed. This flexible feature ensures that your app's keyboard behavior remains seamless and user-friendly.]]></description>
            <content:encoded><![CDATA[<p>I'm thrilled to announce the release of <code>react-native-keyboard-controller</code> version <code>1.8.0</code>. With this latest release, I introduce the <code>useKeyboardController</code> hook and <code>setEnabled</code> method, which allows for a gradual integration of the library into your project, enabling you to disable the module on specific screens as needed. This flexible feature ensures that your app's keyboard behavior remains seamless and user-friendly.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-new-in-version-180-the-setenabled-hook">What's New in Version 1.8.0: The <code>setEnabled</code> Hook<a href="#whats-new-in-version-180-the-setenabled-hook" class="hash-link" aria-label="Direct link to whats-new-in-version-180-the-setenabled-hook" title="Direct link to whats-new-in-version-180-the-setenabled-hook">â€‹</a></h2><p>The star feature of <code>react-native-keyboard-controller</code> version <code>1.8.0</code> is the introduction of the <code>setEnabled</code> method. This method provides developers with granular control over when and where the library's keyboard management should be active.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-use-setenabled">How to Use <code>setEnabled</code><a href="#how-to-use-setenabled" class="hash-link" aria-label="Direct link to how-to-use-setenabled" title="Direct link to how-to-use-setenabled">â€‹</a></h3><p>Using the <code>setEnabled</code> method is incredibly straightforward. Here's a quick example of how to integrate it into your React Native project:</p><div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> useKeyboardController </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'react-native-keyboard-controller'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> enabled</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setEnabled </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useKeyboardController</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// if you want to know whether is module active at the moment</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">enabled</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// disable keyboard controller on a specific screen</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">setEnabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this example, we're importing the <code>useKeyboardController</code> hook from the <code>react-native-keyboard-controller</code> library. This hook returns <code>setEnabled</code> method (which you can use to disable keyboard management for a specific screen) and <code>enabled</code> variable (indicating whether the module is active now or not).</p><p>When you disable the module using <code>setEnabled(false)</code>, the screen will fallback to the default <code>Android</code> behavior, automatically resizing based on <code>AndroidManifest</code> preferences (<code>android:windowSoftInputMode</code>). This level of control allows you to tailor the keyboard experience to your app's unique needs on a per-screen basis.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-cases-for-setenabled">Use Cases for <code>setEnabled</code><a href="#use-cases-for-setenabled" class="hash-link" aria-label="Direct link to use-cases-for-setenabled" title="Direct link to use-cases-for-setenabled">â€‹</a></h3><p>The <code>setEnabled</code> method is incredibly versatile and can be employed in various scenarios:</p><ul><li><p><strong>Forms</strong>: Disable keyboard management on screens with simple forms that don't require custom keyboard management.</p></li><li><p><strong>Chat Interfaces</strong>: Keep keyboard management enabled for chat screens, ensuring smooth and consistent user experiences during messaging interactions.</p></li><li><p><strong>Gradual Integration</strong>: Tailor keyboard functionality on specific pages where you require precise control over how the keyboard behaves, while leaving other screens unaffected by these adjustments.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">â€‹</a></h2><p><code>react-native-keyboard-controller</code> continues to evolve, making it an essential tool for React Native developers who want to provide exceptional user experiences in their mobile apps.</p><p>With the introduction of the <code>setEnabled</code> method in version <code>1.8.0</code>, you now have even more control over keyboard behavior, ensuring that your app feels polished and responsive ðŸ˜Ž</p><p>To get started with the latest version, check out the <a href="/react-native-keyboard-controller/">official documentation</a> and explore the new possibilities that the <code>setEnabled</code> method offers.</p><p>Upgrade your React Native project today and take your keyboard management to the next level with <code>react-native-keyboard-controller</code> version <code>1.8.0</code>!</p><p>Stay tuned for future updates and releases as I continue to enhance the <code>react-native-keyboard-controller</code> library. Follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> and <a href="https://github.com/kirillzyusko" target="_blank" rel="noopener noreferrer">GitHub</a> for updates. Thank you for your support! ðŸ˜Š</p>]]></content:encoded>
            <category>react-native</category>
            <category>keyboard</category>
            <category>setEnabled</category>
        </item>
        <item>
            <title><![CDATA[Introducing KeyboardAvoidingView - Elevating Your React Native UI Experience]]></title>
            <link>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components</link>
            <guid>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components</guid>
            <pubDate>Fri, 08 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[I'm glad to announce the upcoming release of react-native-keyboard-controller, a library designed to enhance your React Native app's user experience. This release marks a significant milestone as I introduce a powerful new feature: the KeyboardAvoidingView. But that's not all â€“ I have exciting plans to expand the collection of pre-built components to simplify handling keyboard insets even further.]]></description>
            <content:encoded><![CDATA[<p>I'm glad to announce the upcoming release of <code>react-native-keyboard-controller</code>, a library designed to enhance your React Native app's user experience. This release marks a significant milestone as I introduce a powerful new feature: the <code>KeyboardAvoidingView</code>. But that's not all â€“ I have exciting plans to expand the collection of pre-built components to simplify handling keyboard insets even further.</p><table><tbody><tr style="border:none"><td style="border:none"><div style="padding-left:20%;padding-right:20%" class="lottie"></div></td><td style="border:none"><div style="padding-left:20%;padding-right:20%" class="lottie"></div></td></tr><tr style="border:none;background-color:#00000000"><td style="border:none;max-width:400px;text-align:center"><i>Default <code>react-native</code> implementation on Android</i></td><td style="border:none;max-width:400px;text-align:center"><i>Implementation from <code>react-native-keyboard-controller</code> <!-- -->with better animations</i></td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-better-way-to-handle-keyboard-insets">A Better Way to Handle Keyboard Insets<a href="#a-better-way-to-handle-keyboard-insets" class="hash-link" aria-label="Direct link to A Better Way to Handle Keyboard Insets" title="Direct link to A Better Way to Handle Keyboard Insets">â€‹</a></h2><p>One of the common challenges React Native developers face is handling the keyboard's appearance and disappearance gracefully. It's especially important when you want your app to look and feel polished on both <code>iOS</code> and <code>Android</code> devices. While the built-in <code>KeyboardAvoidingView</code> component in React Native works well for <code>iOS</code>, it doesn't provide the same level of smoothness and consistency on <code>Android</code>.</p><p>I have been hard at work, and in this upcoming release, I'm thrilled to unveil the enhanced <code>KeyboardAvoidingView</code>. With this component, you can achieve a seamless keyboard animation experience across both major platforms â€“ <code>iOS</code> and <code>Android</code>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="features-of-keyboardavoidingview">Features of <code>KeyboardAvoidingView</code><a href="#features-of-keyboardavoidingview" class="hash-link" aria-label="Direct link to features-of-keyboardavoidingview" title="Direct link to features-of-keyboardavoidingview">â€‹</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="platform-agnostic-animation">Platform-agnostic Animation<a href="#platform-agnostic-animation" class="hash-link" aria-label="Direct link to Platform-agnostic Animation" title="Direct link to Platform-agnostic Animation">â€‹</a></h3><p>With the new <code>KeyboardAvoidingView</code>, you can say goodbye to platform-specific workarounds. This component is designed to work harmoniously on both <code>iOS</code> and <code>Android</code>, ensuring a consistent user experience throughout your app.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="smoother-animations">Smoother Animations<a href="#smoother-animations" class="hash-link" aria-label="Direct link to Smoother Animations" title="Direct link to Smoother Animations">â€‹</a></h3><p>The enhanced <code>KeyboardAvoidingView</code> offers smoother and more natural animations when the keyboard appears or disappears. This means your UI elements will gracefully adjust to accommodate the keyboard, preventing awkward overlaps and ensuring your users can interact with your app seamlessly.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="backward-compatible-and-seamless-integration">Backward Compatible and Seamless Integration<a href="#backward-compatible-and-seamless-integration" class="hash-link" aria-label="Direct link to Backward Compatible and Seamless Integration" title="Direct link to Backward Compatible and Seamless Integration">â€‹</a></h3><p>I understand the importance of maintaining compatibility with existing codebases and providing a smooth transition for React Native developers. With enhanced <code>KeyboardAvoidingView</code>, I've put compatibility at the forefront of design principles.</p><p>The <code>KeyboardAvoidingView</code> is crafted to seamlessly integrate with your existing React Native projects. It's a <strong>drop-in</strong> replacement for the default React Native <code>KeyboardAvoidingView</code> component. This means that you can start using an enhanced version without the need for extensive code modifications or rewrites.</p><p>Whether you're working on a brand-new project or updating an existing app, making the switch to re-implemented <code>KeyboardAvoidingView</code> is as simple as updating your import statements. Your existing codebase remains intact, and the benefits of smoother animations and cross-platform compatibility come without the hassle ðŸ˜Ž</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="customizable">Customizable<a href="#customizable" class="hash-link" aria-label="Direct link to Customizable" title="Direct link to Customizable">â€‹</a></h3><p>I believe that the best tools are those that adapt to your unique project requirements. That's why I'm excited to introduce a dedicated avenue for customization. If you find that the default behavior of <code>KeyboardAvoidingView</code> doesn't precisely align with your app's needs, I encourage you to explore the possibilities of customization ðŸ¤“</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="share-your-ideas-and-report-bugs-">Share Your Ideas and Report Bugs ðŸ’¡<a href="#share-your-ideas-and-report-bugs-" class="hash-link" aria-label="Direct link to Share Your Ideas and Report Bugs ðŸ’¡" title="Direct link to Share Your Ideas and Report Bugs ðŸ’¡">â€‹</a></h4><p>Your feedback is invaluable to me. If you have ideas for new features, improvements, or you encounter any issues while using <code>KeyboardAvoidingView</code>, I invite you to get involved. Feel free to submit your suggestions, feature requests, or bug reports through my <a href="https://github.com/kirillzyusko/react-native-keyboard-controller" target="_blank" rel="noopener noreferrer">GitHub</a> repository.</p><p>The community is built on collaboration, and together, I believe we can make this library even better. By actively participating and sharing your insights, you contribute to the growth and enhancement of <code>react-native-keyboard-controller</code> and <code>KeyboardAvoidingView</code> in a particular.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-coming-next">What's Coming Next<a href="#whats-coming-next" class="hash-link" aria-label="Direct link to What's Coming Next" title="Direct link to What's Coming Next">â€‹</a></h2><p>While I'm excited to introduce the <code>KeyboardAvoidingView</code> in this release, my commitment to making your React Native development experience smoother doesn't stop here. I have big plans to expand the library with more pre-built components designed to simplify complex tasks related to keyboard handling.</p><p>In the pipeline, you can look forward to components like <code>KeyboardAwareScrollView</code> for effortlessly managing scroll views, <code>StickyFooter</code> for keeping crucial UI elements in view, and much more. My goal is to provide you with a comprehensive toolkit for creating exceptional user interfaces in React Native.</p><p>Stay tuned for future updates and releases as I continue to enhance the <code>react-native-keyboard-controller</code> library. Follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> and <a href="https://github.com/kirillzyusko" target="_blank" rel="noopener noreferrer">GitHub</a> for updates. Thank you for your support! ðŸ˜Š</p>]]></content:encoded>
            <category>react-native</category>
            <category>keyboard</category>
            <category>avoiding view</category>
        </item>
        <item>
            <title><![CDATA[Enhanced events metadata - say goodbye to guesswork and hello to precision!]]></title>
            <link>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/enhanced-metadata</link>
            <guid>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/enhanced-metadata</guid>
            <pubDate>Fri, 25 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[I'm thrilled to unveil the latest upgrade to the react-native-keyboard-controller library - version 1.6.0! This release is all about empowering developers like you with enhanced event metadata, providing you with advanced techniques to take your keyboard handling to the next level.]]></description>
            <content:encoded><![CDATA[<p>I'm thrilled to unveil the latest upgrade to the <code>react-native-keyboard-controller</code> library - version <code>1.6.0</code>! This release is all about empowering developers like you with enhanced event metadata, providing you with advanced techniques to take your keyboard handling to the next level.</p><div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px" class="lottie"></div></div><p><strong>Say goodbye to guesswork and hello to precision!</strong> React Native Keyboard Controller <code>1.6.0</code> introduces a trio of new fields in the event metadata that will revolutionize the way you manage keyboard interactions in your React Native applications ðŸ˜Ž</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-features">Key features<a href="#key-features" class="hash-link" aria-label="Direct link to Key features" title="Direct link to Key features">â€‹</a></h2><p>Below you can find a list of key features added in this release ðŸ˜Š</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="timestamp-sync-your-animations-seamlessly">Timestamp: Sync your animations seamlessly<a href="#timestamp-sync-your-animations-seamlessly" class="hash-link" aria-label="Direct link to Timestamp: Sync your animations seamlessly" title="Direct link to Timestamp: Sync your animations seamlessly">â€‹</a></h3><p>The addition of the <code>timestamp</code> field in the event metadata marks a breakthrough in keyboard handling. Now, you can precisely calculate the delay between an event occurring in the native thread and its propagation to JavaScript. This level of accuracy enables you to orchestrate keyboard handling with finesse, ensuring a seamless and visually pleasing user experience.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="target-layout-mastery-at-your-fingertips">Target: Layout mastery at your fingertips<a href="#target-layout-mastery-at-your-fingertips" class="hash-link" aria-label="Direct link to Target: Layout mastery at your fingertips" title="Direct link to Target: Layout mastery at your fingertips">â€‹</a></h3><p>Unlock the potential of enhanced layout handling with the <code>target</code> field in event metadata. By accessing the view tag of the focused field, you can synchronously retrieve layout information. This newfound capability empowers you to make real-time adjustments to your UI elements based on the active input, creating a fluid and context-aware user interface.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="duration-elevate-animation-fluidity">Duration: Elevate animation fluidity<a href="#duration-elevate-animation-fluidity" class="hash-link" aria-label="Direct link to Duration: Elevate animation fluidity" title="Direct link to Duration: Elevate animation fluidity">â€‹</a></h3><p>Experience the art of animation depth with the <code>duration</code> field in event metadata. If you're aiming for parallax-like effects without the intricacies of frame-in-frame keyboard animations, this feature is your key! Define the <code>duration</code> of the keyboard animation to achieve a captivating parallax effect that adds a touch of elegance to your app's visual appeal.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next?<a href="#whats-next" class="hash-link" aria-label="Direct link to What's next?" title="Direct link to What's next?">â€‹</a></h2><p>I'm also excited to share a sneak peek into what's on the horizon ðŸ˜Ž</p><p>During the <code>1.6.0</code> development cycle, I've delved even deeper into keyboard handling, uncovering insights that will shape the way you interact with keyboards in your React Native apps. So my investigation has inspired a new API that will make keyboard interactions more intuitive and seamless. Whether you're a seasoned developer or just starting out, managing keyboards will become a breeze.</p><p>Also I will be actively addressing GitHub issues and ensuring compatibility with the latest React Native version. My commitment to excellence means you can rely on a stable and up-to-date library ðŸ˜Š</p><p>Follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> for updates. Thank you for your support!</p>]]></content:encoded>
            <category>react-native</category>
            <category>keyboard</category>
            <category>focused text input</category>
            <category>duration</category>
        </item>
        <item>
            <title><![CDATA[Interactive keyboard support]]></title>
            <link>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/interactive-keyboard</link>
            <guid>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/interactive-keyboard</guid>
            <pubDate>Mon, 10 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[I'm excited to announce that the upcoming release of react-native-keyboard-controller, version 1.5.0, will include a new feature that allows users to control the position of the keyboard on the screen via gestures. This new interactive keyboard feature will make it easier for users to interact with the keyboard in a more natural and intuitive way, improving the overall user experience of your React Native app.]]></description>
            <content:encoded><![CDATA[<p>I'm excited to announce that the upcoming release of <code>react-native-keyboard-controller</code>, version <code>1.5.0</code>, will include a new feature that allows users to control the position of the keyboard on the screen via gestures. This new interactive keyboard feature will make it easier for users to interact with the keyboard in a more natural and intuitive way, improving the overall user experience of your React Native app.</p><div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px" class="lottie"></div></div><p>The interactive keyboard feature is customizable on Android ðŸ¤–, allowing developers to define how the gesture controls the keyboard position and how the view should be animated when the keyboard is moved. This new feature is particularly useful for chat and other apps that require precise control over the position of the keyboard. The addition of this new interactive keyboard feature will further enhance the library's capabilities and provide a more natural and intuitive user experience.</p><p>Stay tuned for more updates and be sure to check out our documentation for more information on how to use this new feature in your React Native app.</p><p>Thank you for choosing <code>react-native-keyboard-controller</code>! ðŸ˜Š</p>]]></content:encoded>
            <category>react-native</category>
            <category>keyboard</category>
            <category>interactive</category>
            <category>android</category>
            <category>ios</category>
        </item>
        <item>
            <title><![CDATA[Version 1.4.0 with new hook]]></title>
            <link>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-hook</link>
            <guid>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-hook</guid>
            <pubDate>Sat, 15 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[New 1.4.0 release enhance API and adds new useKeyboardHandler hook. While keeping no breaking changes this release (via new hook) adds an ability to have intermediate values on iOS for height and progress values (before it was not possible and it was a restriction of the library).]]></description>
            <content:encoded><![CDATA[<p>New 1.4.0 release enhance API and adds new <code>useKeyboardHandler</code> hook. While keeping no breaking changes this release (via new hook) adds an ability to have intermediate values on iOS for <code>height</code> and <code>progress</code> values (before it was not possible and it was a restriction of the library).</p><p>Also this hooks allow to track keyboard lifecycle and it's better suit for complex animations ðŸ˜Ž</p><p>Check out the new documentation for this hook, upgrade library version to <code>1.4.0</code> and start using it today!</p>]]></content:encoded>
            <category>new hook</category>
            <category>iOS</category>
            <category>intermediate values</category>
        </item>
        <item>
            <title><![CDATA[Version 1.2.0 with new architecture support]]></title>
            <link>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/fabric</link>
            <guid>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/fabric</guid>
            <pubDate>Thu, 22 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[I'm glad to announce, that new upcoming release 1.2.0 brings a support for new react native architecture ðŸ˜Ž]]></description>
            <content:encoded><![CDATA[<p>I'm glad to announce, that new upcoming release <code>1.2.0</code> brings a support for new react native architecture ðŸ˜Ž</p><p>Fortunately this library is backward compatible with old architecture and will be compiled conditionally depending on which architecture you are using. So don't be afraid of updating it to the latest version - it doesn't have any breaking changes!</p><p><img loading="lazy" alt="react native logo" src="/react-native-keyboard-controller/assets/images/react-native-53fe9c4e0ebe3c3ff285c169eaaff011.png" width="1160" height="560" class="img_ev3q"></p><p>The decision to add support for a new architecture (to prioritize a new architecture adoption over other features) was made in order to understand all peculiarities of the new architecture and to discover its possibilities. Hopefully such knowledge can help add new features for the library in the future.</p><p>Obviously, the migration process will take some time for other libraries, so future versions of this library will still support two architectures. When most other open source libraries will be migrated to the new architecture and the new architecture becomes the standard in the react native ecosystem, then support for the old architecture will be removed.</p><p>Stay tuned for future updates! ðŸ˜Š</p>]]></content:encoded>
            <category>react-native</category>
            <category>release</category>
            <category>new architecture</category>
            <category>fabric</category>
            <category>turbo modules</category>
        </item>
        <item>
            <title><![CDATA[React Native meets smooth keyboard animations]]></title>
            <link>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/welcome</link>
            <guid>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/welcome</guid>
            <pubDate>Wed, 22 Jun 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Many flagship applications that are written natively (such as Telegram, Instagram, etc.) use the full power of platform-specific native APIs (iOS, Android) to make transitions between opening/closing the keyboard animated and smooth.]]></description>
            <content:encoded><![CDATA[<p>Many flagship applications that are written natively (such as <code>Telegram</code>, <code>Instagram</code>, etc.) use the full power of platform-specific native APIs (<code>iOS</code>, <code>Android</code>) to make transitions between opening/closing the keyboard animated and smooth.</p><p>Unfortunately, in <code>react-native</code> this aspect was given little attention and all <code>react-native</code> applications were suffering because of that - animations were rough, you couldn't write cross-platform code because some keyboard events were not available, etc. But with the advent of this library, everything changes... ðŸ˜Ž</p><div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px" class="lottie"></div></div><p>The purpose of this library was utilizing all power of native API and at the same time provide a universal way in <code>react-native</code> to deal with it (allowing to use some platforms advanced technics if needed). Thus this library allows you to track each keyboard frame movement, and create corresponding reactions (move elements accordingly).</p><p>The first release of this library brings missing <code>keyboardWillShow</code>/<code>keyboardWillHide</code> events on <code>Android</code> making <code>events</code> module fully cross-platform as well as adding a way to use <code>Animated.Value</code> for managing keyboard frames.</p><p>In further releases the API will be enhanced:</p><ul><li>support will be added for interactive keyboard dismissing (on Android)</li><li>the library will be rewritten to new <code>Fabric</code> architecture</li><li>maybe some components, such as <code>KeyboardAvoidingView</code>/<code>KeyboardAwareScrollView</code> will be available here with better performance and animations.</li></ul><p>Stay tuned! ðŸ˜Š</p>]]></content:encoded>
            <category>react-native</category>
            <category>keyboard</category>
            <category>animation</category>
        </item>
    </channel>
</rss>