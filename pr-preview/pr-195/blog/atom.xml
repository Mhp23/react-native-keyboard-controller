<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog</id>
    <title>Keyboard Controller Blog</title>
    <updated>2023-08-25T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog"/>
    <subtitle>Keyboard Controller Blog</subtitle>
    <icon>https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Enhanced events metadata - say goodbye to guesswork and hello to precision!]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog/enhanced-metadata</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog/enhanced-metadata"/>
        <updated>2023-08-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Please meet a new release of react-native-keyboard-controller which enhances events metadata and allows you to apply more advanced techniques when you need to deal with a keyboard handling.]]></summary>
        <content type="html"><![CDATA[<p>Please meet a new release of <code>react-native-keyboard-controller</code> which enhances events metadata and allows you to apply more advanced techniques when you need to deal with a keyboard handling.</p><p>I'm thrilled to unveil the latest upgrade to the <code>react-native-keyboard-controller</code> library - version <code>1.6.0</code>! This release is all about empowering developers like you with enhanced event metadata, providing you with advanced techniques to take your keyboard handling to the next level.</p><div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px"></div></div><p><strong>Say goodbye to guesswork and hello to precision!</strong> React Native Keyboard Controller <code>1.6.0</code> introduces a trio of new fields in the event metadata that will revolutionize the way you manage keyboard interactions in your React Native applications ðŸ˜Ž</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-features">Key features<a href="#key-features" class="hash-link" aria-label="Direct link to Key features" title="Direct link to Key features">â€‹</a></h2><p>Below you can find a list of key features added in this release ðŸ˜Š</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="timestamp-sync-your-animations-seamlessly">Timestamp: Sync your animations seamlessly<a href="#timestamp-sync-your-animations-seamlessly" class="hash-link" aria-label="Direct link to Timestamp: Sync your animations seamlessly" title="Direct link to Timestamp: Sync your animations seamlessly">â€‹</a></h3><p>The addition of the <code>timestamp</code> field in the event metadata marks a breakthrough in keyboard handling. Now, you can precisely calculate the delay between an event occurring in the native thread and its propagation to JavaScript. This level of accuracy enables you to orchestrate keyboard handling with finesse, ensuring a seamless and visually pleasing user experience.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="target-layout-mastery-at-your-fingertips">Target: Layout mastery at your fingertips<a href="#target-layout-mastery-at-your-fingertips" class="hash-link" aria-label="Direct link to Target: Layout mastery at your fingertips" title="Direct link to Target: Layout mastery at your fingertips">â€‹</a></h3><p>Unlock the potential of enhanced layout handling with the <code>target</code> field in event metadata. By accessing the view tag of the focused field, you can synchronously retrieve layout information. This newfound capability empowers you to make real-time adjustments to your UI elements based on the active input, creating a fluid and context-aware user interface.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="duration-elevate-animation-fluidity">Duration: Elevate animation fluidity<a href="#duration-elevate-animation-fluidity" class="hash-link" aria-label="Direct link to Duration: Elevate animation fluidity" title="Direct link to Duration: Elevate animation fluidity">â€‹</a></h3><p>Experience the art of animation depth with the <code>duration</code> field in event metadata. If you're aiming for parallax-like effects without the intricacies of frame-in-frame keyboard animations, this feature is your key! Define the <code>duration</code> of the keyboard animation to achieve a captivating parallax effect that adds a touch of elegance to your app's visual appeal.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next?<a href="#whats-next" class="hash-link" aria-label="Direct link to What's next?" title="Direct link to What's next?">â€‹</a></h2><p>As I gear up for the launch of <code>react-native-keyboard-controller</code> 1.6.0, I'm also excited to share a sneak peek into what's on the horizon.</p><p>I've delved even deeper into keyboard handling, uncovering insights that will shape the way you interact with keyboards in your React Native apps. So my investigation has inspired a new API that will make keyboard interactions more intuitive and seamless. Whether you're a seasoned developer or just starting out, managing keyboards will become a breeze.</p><p>Also I will be actively addressing GitHub issues and ensuring compatibility with the latest React Native version. My commitment to excellence means you can rely on a stable and up-to-date library ðŸ˜Š</p><p>Follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> for updates. Thank you for your support!</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="focused text input" term="focused text input"/>
        <category label="duration" term="duration"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interactive keyboard support]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog/interactive-keyboard</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog/interactive-keyboard"/>
        <updated>2023-04-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm excited to announce that the upcoming release of react-native-keyboard-controller, version 1.5.0, will include a new feature that allows users to control the position of the keyboard on the screen via gestures. This new interactive keyboard feature will make it easier for users to interact with the keyboard in a more natural and intuitive way, improving the overall user experience of your React Native app.]]></summary>
        <content type="html"><![CDATA[<p>I'm excited to announce that the upcoming release of <code>react-native-keyboard-controller</code>, version <code>1.5.0</code>, will include a new feature that allows users to control the position of the keyboard on the screen via gestures. This new interactive keyboard feature will make it easier for users to interact with the keyboard in a more natural and intuitive way, improving the overall user experience of your React Native app.</p><div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px"></div></div><p>The interactive keyboard feature is customizable on Android ðŸ¤–, allowing developers to define how the gesture controls the keyboard position and how the view should be animated when the keyboard is moved. This new feature is particularly useful for chat and other apps that require precise control over the position of the keyboard. The addition of this new interactive keyboard feature will further enhance the library's capabilities and provide a more natural and intuitive user experience.</p><p>Stay tuned for more updates and be sure to check out our documentation for more information on how to use this new feature in your React Native app.</p><p>Thank you for choosing <code>react-native-keyboard-controller</code>! ðŸ˜Š</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="interactive" term="interactive"/>
        <category label="android" term="android"/>
        <category label="ios" term="ios"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Version 1.4.0 with new hook]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog/new-hook</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog/new-hook"/>
        <updated>2022-10-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[New 1.4.0 release enhance API and adds new useKeyboardHandler hook. While keeping no breaking changes this release (via new hook) adds an ability to have intermediate values on iOS for height and progress values (before it was not possible and it was a restriction of the library).]]></summary>
        <content type="html"><![CDATA[<p>New 1.4.0 release enhance API and adds new <code>useKeyboardHandler</code> hook. While keeping no breaking changes this release (via new hook) adds an ability to have intermediate values on iOS for <code>height</code> and <code>progress</code> values (before it was not possible and it was a restriction of the library).</p><p>Also this hooks allow to track keyboard lifecycle and it's better suit for complex animations ðŸ˜Ž</p><p>Check out the new documentation for this hook, upgrade library version to <code>1.4.0</code> and start using it today!</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="new hook" term="new hook"/>
        <category label="iOS" term="iOS"/>
        <category label="intermediate values" term="intermediate values"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Version 1.2.0 with new architecture support]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog/fabric</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog/fabric"/>
        <updated>2022-09-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm glad to announce, that new upcoming release 1.2.0 brings a support for new react native architecture ðŸ˜Ž]]></summary>
        <content type="html"><![CDATA[<p>I'm glad to announce, that new upcoming release <code>1.2.0</code> brings a support for new react native architecture ðŸ˜Ž</p><p>Fortunately this library is backward compatible with old architecture and will be compiled conditionally depending on which architecture you are using. So don't be afraid of updating it to the latest version - it doesn't have any breaking changes!</p><p><img loading="lazy" alt="react native logo" src="/react-native-keyboard-controller/pr-preview/pr-195/assets/images/react-native-53fe9c4e0ebe3c3ff285c169eaaff011.png" width="1160" height="560" class="img_ev3q"></p><p>The decision to add support for a new architecture (to prioritize a new architecture adoption over other features) was made in order to understand all peculiarities of the new architecture and to discover its possibilities. Hopefully such knowledge can help add new features for the library in the future.</p><p>Obviously, the migration process will take some time for other libraries, so future versions of this library will still support two architectures. When most other open source libraries will be migrated to the new architecture and the new architecture becomes the standard in the react native ecosystem, then support for the old architecture will be removed.</p><p>Stay tuned for future updates! ðŸ˜Š</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="release" term="release"/>
        <category label="new architecture" term="new architecture"/>
        <category label="fabric" term="fabric"/>
        <category label="turbo modules" term="turbo modules"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Native meets smooth keyboard animations]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog/welcome</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/pr-preview/pr-195/blog/welcome"/>
        <updated>2022-06-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Many flagship applications that are written natively (such as Telegram, Instagram, etc.) use the full power of platform-specific native APIs (iOS, Android) to make transitions between opening/closing the keyboard animated and smooth.]]></summary>
        <content type="html"><![CDATA[<p>Many flagship applications that are written natively (such as <code>Telegram</code>, <code>Instagram</code>, etc.) use the full power of platform-specific native APIs (<code>iOS</code>, <code>Android</code>) to make transitions between opening/closing the keyboard animated and smooth.</p><p>Unfortunately, in <code>react-native</code> this aspect was given little attention and all <code>react-native</code> applications were suffering because of that - animations were rough, you couldn't write cross-platform code because some keyboard events were not available, etc. But with the advent of this library, everything changes... ðŸ˜Ž</p><div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px"></div></div><p>The purpose of this library was utilizing all power of native API and at the same time provide a universal way in <code>react-native</code> to deal with it (allowing to use some platforms advanced technics if needed). Thus this library allows you to track each keyboard frame movement, and create corresponding reactions (move elements accordingly).</p><p>The first release of this library brings missing <code>keyboardWillShow</code>/<code>keyboardWillHide</code> events on <code>Android</code> making <code>events</code> module fully cross-platform as well as adding a way to use <code>Animated.Value</code> for managing keyboard frames.</p><p>In further releases the API will be enhanced:</p><ul><li>support will be added for interactive keyboard dismissing (on Android)</li><li>the library will be rewritten to new <code>Fabric</code> architecture</li><li>maybe some components, such as <code>KeyboardAvoidingView</code>/<code>KeyboardAwareScrollView</code> will be available here with better performance and animations.</li></ul><p>Stay tuned! ðŸ˜Š</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="animation" term="animation"/>
    </entry>
</feed>