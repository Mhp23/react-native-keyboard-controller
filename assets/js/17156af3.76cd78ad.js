"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6467],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),y=r,m=u["".concat(d,".").concat(y)]||u[y]||p[y]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2462:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3},i="Interactive Keyboard",l={unversionedId:"guides/interactive-keyboard",id:"version-1.5.0/guides/interactive-keyboard",title:"Interactive Keyboard",description:"This guide focuses on adding an ability to dismiss keyboard interactively. Below you can see a step by step guide which will explain how different pieces of the code work together.",source:"@site/versioned_docs/version-1.5.0/guides/interactive-keyboard.md",sourceDirName:"guides",slug:"/guides/interactive-keyboard",permalink:"/react-native-keyboard-controller/docs/guides/interactive-keyboard",draft:!1,editUrl:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/versioned_docs/version-1.5.0/guides/interactive-keyboard.md",tags:[],version:"1.5.0",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Building own hook",permalink:"/react-native-keyboard-controller/docs/guides/building-own-hook"},next:{title:"Compatibility",permalink:"/react-native-keyboard-controller/docs/guides/compatibility"}},d={},s=[{value:"Android",id:"android",level:2},{value:"Start point",id:"start-point",level:3},{value:"Adding <code>KeyboardGestureArea</code>",id:"adding-keyboardgesturearea",level:3},{value:"Reacting on keyboard movement",id:"reacting-on-keyboard-movement",level:3},{value:"iOS",id:"ios",level:2},{value:"Full examples",id:"full-examples",level:2}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interactive-keyboard"},"Interactive Keyboard"),(0,r.kt)("p",null,"This guide focuses on adding an ability to dismiss keyboard interactively. Below you can see a step by step guide which will explain how different pieces of the code work together."),(0,r.kt)("h2",{id:"android"},"Android"),(0,r.kt)("h3",{id:"start-point"},"Start point"),(0,r.kt)("p",null,"First of all let's consider a simple example and layout for typical chat application. Of course in real-application layout will be much more complex, but since it's a guide we will consider an over-simplified example to get a main idea."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<ScrollView>\n  <Messages />\n</ScrollView>\n")),(0,r.kt)("h3",{id:"adding-keyboardgesturearea"},"Adding ",(0,r.kt)("inlineCode",{parentName:"h3"},"KeyboardGestureArea")),(0,r.kt)("p",null,"To make interactive dismissing work on Android we need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"KeyboardGestureArea")," view. This view will track all gestures and will control the keyboard positioning. To customize the way how the keyboard will be dismissed you can specify ",(0,r.kt)("inlineCode",{parentName:"p"},"interpolator")," ",(0,r.kt)("a",{parentName:"p",href:"/react-native-keyboard-controller/docs/api/keyboard-gesture-area#interpolator"},"prop"),"."),(0,r.kt)("p",null,"In order to recognize all gestures on a ",(0,r.kt)("inlineCode",{parentName:"p"},"ScrollView")," we need to wrap a ",(0,r.kt)("inlineCode",{parentName:"p"},"ScrollView")," within ",(0,r.kt)("inlineCode",{parentName:"p"},"KeyboardGestureArea"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// add-new-code\n<KeyboardGestureArea interpolator="ios">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n// add-new-code\n</KeyboardGestureArea>\n')),(0,r.kt)("h3",{id:"reacting-on-keyboard-movement"},"Reacting on keyboard movement"),(0,r.kt)("p",null,"Basically ",(0,r.kt)("inlineCode",{parentName:"p"},"useKeyboardAnimation"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"useReanimatedKeyboardAnimation")," will update animated values as keyboard moves. But if you want to differ plain keyboard movements (when it shows/hides because of ",(0,r.kt)("inlineCode",{parentName:"p"},"TextInput")," gets focused/unfocused) and interactive keyboard movement, then you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"useKeyboardHandler")," hook and specify ",(0,r.kt)("a",{parentName:"p",href:"/react-native-keyboard-controller/docs/api/hooks/use-keyboard-handler/#oninteractive"},(0,r.kt)("inlineCode",{parentName:"a"},"onInteractive"))," handler as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      // your handler for interactive keyboard movement\n    }\n  },\n  []\n);\n")),(0,r.kt)("h2",{id:"ios"},"iOS"),(0,r.kt)("p",null,"The interactive keyboard dismissing works well out-of-box in ",(0,r.kt)("inlineCode",{parentName:"p"},"react-native")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"InputAccessoryView"),". However if you are not satisfied with the usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"InputAccessoryView")," - you can try to utilize the functionality of this library."),(0,r.kt)("p",null,"For that you'll need to follow a pattern from above and add ",(0,r.kt)("a",{parentName:"p",href:"/react-native-keyboard-controller/docs/api/hooks/use-keyboard-handler/#oninteractive"},(0,r.kt)("inlineCode",{parentName:"a"},"onInteractive"))," handler if you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"useKeyboardHandler")," hook. If you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"useKeyboardAnimation")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"useReanimatedKeyboardAnimation")," hooks then no extra actions are required - these hooks will update its values automatically, when keyboard gets moved because of interactive dismissal."),(0,r.kt)("h2",{id:"full-examples"},"Full examples"),(0,r.kt)("p",null,"To see full examples of interactive keyboard handling you may have a look on corresponding ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kirillzyusko/react-native-keyboard-controller/blob/main/example/src/screens/Examples/InteractiveKeyboard/index.tsx"},"android")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kirillzyusko/react-native-keyboard-controller/blob/main/example/src/screens/Examples/InteractiveKeyboardIOS/index.tsx"},"ios")," example apps."))}p.isMDXComponent=!0}}]);