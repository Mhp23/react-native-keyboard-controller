"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1085],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),y=a,m=u["".concat(d,".").concat(y)]||u[y]||p[y]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4725:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3},i="Interactive Keyboard (Android)",l={unversionedId:"guides/interactive-keyboard-android",id:"guides/interactive-keyboard-android",title:"Interactive Keyboard (Android)",description:"This guide focuses on adding an ability to dismiss keyboard interactively on Android. Below you can see a step by step guide which will explain how different pieces of the code work together.",source:"@site/docs/guides/interactive-keyboard-android.md",sourceDirName:"guides",slug:"/guides/interactive-keyboard-android",permalink:"/react-native-keyboard-controller/docs/next/guides/interactive-keyboard-android",draft:!1,editUrl:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/docs/guides/interactive-keyboard-android.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Building own hook",permalink:"/react-native-keyboard-controller/docs/next/guides/building-own-hook"},next:{title:"Compatibility",permalink:"/react-native-keyboard-controller/docs/next/guides/compatibility"}},d={},s=[{value:"Start point",id:"start-point",level:2},{value:"Adding <code>KeyboardGestureArea</code>",id:"adding-keyboardgesturearea",level:2},{value:"Reacting on keyboard movement",id:"reacting-on-keyboard-movement",level:2},{value:"Full example",id:"full-example",level:2}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interactive-keyboard-android"},"Interactive Keyboard (Android)"),(0,a.kt)("p",null,"This guide focuses on adding an ability to dismiss keyboard interactively on Android. Below you can see a step by step guide which will explain how different pieces of the code work together."),(0,a.kt)("h2",{id:"start-point"},"Start point"),(0,a.kt)("p",null,"First of all let's consider a simple example and layout for typical chat application."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"<ScrollView>\n  <Messages />\n</ScrollView>\n")),(0,a.kt)("h2",{id:"adding-keyboardgesturearea"},"Adding ",(0,a.kt)("inlineCode",{parentName:"h2"},"KeyboardGestureArea")),(0,a.kt)("p",null,"To make interactive dismissing work on Android we need to add ",(0,a.kt)("inlineCode",{parentName:"p"},"KeyboardGestureArea")," view. This view will track all gestures and will control the keyboard positioning. To customize the way how the keyboard will be dismissed you can specify ",(0,a.kt)("inlineCode",{parentName:"p"},"interpolator")," ",(0,a.kt)("a",{parentName:"p",href:"/react-native-keyboard-controller/docs/next/api/keyboard-gesture-area#interpolator"},"prop"),"."),(0,a.kt)("p",null,"In order to recognize all gestures on a ",(0,a.kt)("inlineCode",{parentName:"p"},"ScrollView")," we need to wrap a ",(0,a.kt)("inlineCode",{parentName:"p"},"ScrollView")," within ",(0,a.kt)("inlineCode",{parentName:"p"},"KeyboardGestureArea"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'// add-new-code\n<KeyboardGestureArea interpolator="ios">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n// add-new-code\n</KeyboardGestureArea>\n')),(0,a.kt)("h2",{id:"reacting-on-keyboard-movement"},"Reacting on keyboard movement"),(0,a.kt)("p",null,"Basically ",(0,a.kt)("inlineCode",{parentName:"p"},"useKeyboardAnimation"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"useReanimatedKeyboardAnimation")," will update animated values as keyboard moves. But if you want to differ plain keyboard movements (when it shows/hides because of ",(0,a.kt)("inlineCode",{parentName:"p"},"TextInput")," gets focused/unfocused) and interactive keyboard movement, then you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"useKeyboardHandler")," hook and specify ",(0,a.kt)("a",{parentName:"p",href:"/react-native-keyboard-controller/docs/next/api/hooks/use-keyboard-handler/#oninteractive"},(0,a.kt)("inlineCode",{parentName:"a"},"onInteractive"))," handler as shown below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      // your handler for interactive keyboard movement\n    }\n  },\n  []\n);\n")),(0,a.kt)("h2",{id:"full-example"},"Full example"),(0,a.kt)("p",null,"To see full example of interactive keyboard handling on Android you may have a look on corresponding ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kirillzyusko/react-native-keyboard-controller/blob/main/example/src/screens/Examples/InteractiveKeyboard/index.tsx"},"example")," app."))}p.isMDXComponent=!0}}]);